{"version":3,"sources":["components/square.js","components/board.js","components/game.js","index.js"],"names":["Square","props","winIndex","winner","i","length","index","className","id","tabIndex","onClick","value","Board","renderSquare","idx","squares","gameBoard","j","map","row","Game","state","history","Array","fill","squareLocation","col","stepNumber","xIsNext","movesAscending","this","slice","calculateWinner","setState","concat","step","lines","a","b","c","status","toggle","current","order","moves","move","desc","squareDetails","jumpTo","handleClick","toggleOrder","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3758601.chunk.js","sourcesContent":["// React component 1 of 3: a \"controlled component\" (by the Board component)\nexport default function Square(props) {\n  let winIndex = null;\n  if (props.winner) {\n    const winner = props.winner[1];\n    for (let i = 0; i < winner.length; i++) {\n      if (props.index === winner[i]) winIndex = 'winner';\n    }\n  }\n\n  return (\n    <button\n      className=\"square\"\n      id={winIndex}\n      tabIndex=\"0\"\n      index={props.index}\n      winner={props.winner}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n","// React component 2 of 3\nimport React from 'react';\nimport Square from './square';\n\nexport default function Board(props) {\n  const renderSquare = (idx) => {\n    return (\n      <Square\n        value={props.squares[idx]}\n        index={idx}\n        winner={props.winner}\n        onClick={() => props.onClick(idx)}\n      />\n    );\n  }\n\n  const gameBoard = [[], [], []];\n  let value = 0;\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      gameBoard[i][j] = value++;\n    }\n  }\n\n  return (\n    gameBoard.map((row, idx) => (\n      <div className=\"board-row\" key={row[idx]}>\n        <ul>{renderSquare(row[0])}</ul>\n        <ul>{renderSquare(row[1])}</ul>\n        <ul>{renderSquare(row[2])}</ul>\n      </div>\n    ))\n  );\n}\n","// React component 3 of 3: The parent component.\n\nimport React from 'react';\nimport Board from './board';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        squareLocation: {\n          row: 0,\n          col: 0,\n        }\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      movesAscending: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1); // This is the history of the game from the empty board to the latest step number, accounting for the possibility that a player has clicked on one of the buttons that wind the game back to a previous step. \n    const current = history[history.length - 1]; // The latest iteration of history, reflecting the move just prior to the latest move/click.\n    const squares = current.squares.slice(); // A copy of the lastest squares array.\n\n    let row;\n    let col;\n\n    if (i <= 2) row = 1;\n    else if (i > 2 && i <= 5) row = 2;\n    else row = 3;\n\n    if (i === 0 || i === 3 || i === 6) col = 1;\n    else if (i === 1 || i === 4 || i === 7) col = 2;\n    else col = 3;\n\n    if (this.calculateWinner(squares) || squares[i])\n      return;\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares,\n        squareLocation: {\n          row: row,\n          col: col\n        }\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  toggleOrder() {\n    this.state.movesAscending === true ? this.setState({ movesAscending: !true }) : this.setState({ movesAscending: true });\n  }\n\n  calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return [squares[a], [a, b, c]];\n      }\n    }\n    return null;\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const squares = current.squares;\n    const winner = this.calculateWinner(squares);\n    const order = this.state.movesAscending;\n\n    const moves = history.map((step, move) => {\n      let desc;\n      const squareDetails = history[history.length - move];\n\n      if (order) {\n        desc = move ? `Move # ${move}: row ${step.squareLocation.row}, col ${step.squareLocation.col}` : 'Game start';\n      } else {\n        desc = move ? `Move # ${history.length - move}: row ${squareDetails.squareLocation.row}, col ${squareDetails.squareLocation.col}` : 'Game start';\n      }\n\n      return (\n        <li key={move} className=\"list\">\n          {order ?\n            <button className=\"history\" onClick={() => this.jumpTo(move)}>{desc}</button>\n            :\n            <button className=\"history\" onClick={() => this.jumpTo(history.length - move)}>{desc}</button>\n          }\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) status = 'Winner: ' + winner[0];\n    else if (!winner && this.state.stepNumber >= 9) status = 'SCRATCH!';\n    else status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\n    let toggle;\n    if (order) toggle = 'History of Moves: Ascending';\n    else toggle = 'History of Moves: Descending';\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            winner={winner}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          {status !== 'SCRATCH!' && !winner ?\n            <div className=\"status\">{status}</div>\n            :\n            status === 'SCRATCH!' ? \n              <div className=\"scratch\">{status}</div>\n            : \n            <div className=\"winner\">{status}</div>\n          }\n          <button\n            className=\"button\"\n            onClick={() => this.toggleOrder()}\n          >\n            {toggle}\n          </button>\n          <div className=\"history\">{moves}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game';\nimport './reset.css';\nimport './index.css';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}